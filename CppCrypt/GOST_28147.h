#pragma once
#include "AbstractBinary.h"
#include "CryptHandler.h"


#define BUF_SIZE 256


#define LSHIFT_nBIT(x, L, N) (((x << L) | (x >> (-L & (N - 1)))) & (((uint64_t)1 << N) - 1))

class GOST_28147 : public AbstractBinary
{
public:
	GOST_28147() = default;
	
	uint8_t* algStart(uint8_t*, uint8_t, uint8_t*, uint8_t*, size_t);

	void setBuffer(uint8_t*);
	void setLength(size_t);

	// Унаследовано через CryptHandler
	virtual uint8_t* handleRequestDecrypt() override;
	virtual uint8_t* handleRequestEncrypt() override;

private:
	size_t poss = 0;
	uint8_t* buffer = 0;
	//uint8_t* encrypted, *decrypted;

	const uint8_t Sbox[8][16] = {
		{0xF, 0xC, 0x2, 0xA, 0x6, 0x4, 0x5, 0x0, 0x7, 0x9, 0xE, 0xD, 0x1, 0xB, 0x8, 0x3},
		{0xB, 0x6, 0x3, 0x4, 0xC, 0xF, 0xE, 0x2, 0x7, 0xD, 0x8, 0x0, 0x5, 0xA, 0x9, 0x1},
		{0x1, 0xC, 0xB, 0x0, 0xF, 0xE, 0x6, 0x5, 0xA, 0xD, 0x4, 0x8, 0x9, 0x3, 0x7, 0x2},
		{0x1, 0x5, 0xE, 0xC, 0xA, 0x7, 0x0, 0xD, 0x6, 0x2, 0xB, 0x4, 0x9, 0x3, 0xF, 0x8},
		{0x0, 0xC, 0x8, 0x9, 0xD, 0x2, 0xA, 0xB, 0x7, 0x3, 0x6, 0x5, 0x4, 0xE, 0xF, 0x1},
		{0x8, 0x0, 0xF, 0x3, 0x2, 0x5, 0xE, 0xB, 0x1, 0xA, 0x4, 0x7, 0xC, 0x9, 0xD, 0x6},
		{0x3, 0x0, 0x6, 0xF, 0x1, 0xE, 0x9, 0x2, 0xD, 0x8, 0xC, 0x4, 0xB, 0xA, 0x5, 0x7},
		{0x1, 0xA, 0x6, 0x8, 0xF, 0xB, 0x0, 0x4, 0xC, 0x3, 0x5, 0x9, 0x7, 0xD, 0x2, 0xE},
	};


	void round_of_feistel_cipher(uint32_t*, uint32_t*, uint8_t);
	void feistel_cipher(uint8_t, uint32_t*, uint32_t*);

	uint32_t substitution_table(uint32_t, uint8_t);
	void substitution_table_by_4bits(uint8_t*, uint8_t);

};

